import{_ as s,W as l,X as o,Z as e,$ as n,a0 as t,Y as r,G as i}from"./framework-cc0d0bf8.js";const p={},c=r(`<h1 id="如何在-vuepress-中支持用代码渲染-uml" tabindex="-1"><a class="header-anchor" href="#如何在-vuepress-中支持用代码渲染-uml" aria-hidden="true">#</a> 如何在 VuePress 中支持用代码渲染 UML</h1><p>前段时间绘图时使用 plantuml 绘制了一些图片，绘制的图片质量挺好，发现这种绘图的方式很适合博客的场景。几年前写博客时曾使用过静态博客，如果长久坚持写博客并且文章里包含了图片，那么图片会导致仓库体积膨胀到几百兆甚至上 GB，仓库体积膨胀会导致项目难以长久维护。如果改用 plantuml 可以带来下面的好处：</p><ol><li>代码能够被 git 管理</li><li>绘图时专注在逻辑上，不用关注排版</li><li>仓库体积不会过快膨胀</li></ol><p>因为有这些好处所以这次改用 VuePress 搭建博客便打算在博客中配置 plantuml，于是有了这篇文章。</p><h2 id="如何配置" tabindex="-1"><a class="header-anchor" href="#如何配置" aria-hidden="true">#</a> 如何配置</h2><p>VuePress 底层使用 markdown-it 渲染 markdown 页面，配置 plantuml 实际上就是增加 makrdown-it 插件，支持 plantuml 的插件有很多，这里使用的是 markdown-it-textual-uml 这个插件，下面是配置过程。</p><p>先安装 markdown-it-textual-uml 到依赖中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> markdown-it-textual-uml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在 VuePress 的配置中增加插件的配置</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// docs/.vuepress/config.ts</span>
<span class="token keyword">import</span> plantuml <span class="token keyword">from</span> <span class="token string">&quot;markdown-it-textual-uml&quot;</span><span class="token punctuation">;</span> 

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineUserConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token function-variable function">extendsMarkdown</span><span class="token operator">:</span> <span class="token punctuation">(</span>md<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    md<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>plantuml<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),u={href:"https://github.com/yuanzhixiang/yuanzhixiang.github.io/pull/14/files",target:"_blank",rel:"noopener noreferrer"},d=r('<img src="https://www.plantuml.com/plantuml/svg/DOp13S0W30F_cI8BT0N4Ae7aKGcI2DBzMsZxi7osBESPDEBg3V9FMAsxgMW0rR21jPqhgB4WkGDJKA4fo0M02nvfruyMVkiiollszHi0" alt="uml diagram"><h2 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h2><p>插件实现代码转图片经过了两个过程，在编译 markdown 时会将代码块转成 <code>&lt;img&gt;</code> 标签，其中的 src 包含了访问的 PlantUML 服务器的域名，图片格式和 uml 的代码，<code>https://www.plantuml.com/plantuml/&lt;image type&gt;/&lt;code&gt;</code>，这其中的 code 是按照一定的编码规则编码后的字符串。当浏览器拿到 <code>&lt;img&gt;</code> 后会请求 src 中的地址拿到对应的图片。下面是这篇博客请求 Sequence Diagram 的过程：</p><img src="https://www.plantuml.com/plantuml/svg/PP313e9034Jl-nKJx_e1nX2E7ZGnKGyU6sYW4Rguku3wzQwW6FNKTZgJlZJrWLnewygaKqTPi0udsy8qKP9C6jA0sQwAvRZTOC-kOpS3URorKJBccPedkBMazrAkGbeiCbi3MA8Jxb66UE5lFO-PPpIwreTumR7cx3Z7bjmvjxqYinf8LBJ0IkeYGILwHh3uePeGlic00S7nfMKV83KLR7ui4yJBwXkhdZyiOoYDu_2liJu0" alt="uml diagram"><h2 id="未来规划" tabindex="-1"><a class="header-anchor" href="#未来规划" aria-hidden="true">#</a> 未来规划</h2>',5),h=e("code",null,"<img>",-1),m={href:"https://docs.asciidoctor.org/diagram-extension/latest/",target:"_blank",rel:"noopener noreferrer"},g=e("h2",{id:"参考文章",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考文章","aria-hidden":"true"},"#"),n(" 参考文章")],-1),_={href:"https://wkii.github.io/Tech/vuepress-add-plantUML-plugin.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.asciidoctor.org/diagram-extension/latest/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.npmjs.com/package/markdown-it",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.npmjs.com/package/markdown-it-textual-uml",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.npmjs.com/package/markdown-it-plantuml",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/dhobsd/asciitosvg",target:"_blank",rel:"noopener noreferrer"},M={href:"http://blockdiag.com/en/",target:"_blank",rel:"noopener noreferrer"},y={href:"http://blockdiag.com/en/seqdiag/index.html",target:"_blank",rel:"noopener noreferrer"},P={href:"http://blockdiag.com/en/actdiag/index.html",target:"_blank",rel:"noopener noreferrer"},B={href:"http://blockdiag.com/en/nwdiag/index.html",target:"_blank",rel:"noopener noreferrer"},V={href:"https://ditaa.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/BurntSushi/erd",target:"_blank",rel:"noopener noreferrer"},L={href:"https://graphviz.gitlab.io/doc/info/lang.html",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/mermaidjs/mermaid.cli",target:"_blank",rel:"noopener noreferrer"},S={href:"https://www.mcternan.me.uk/mscgen/",target:"_blank",rel:"noopener noreferrer"},U={href:"https://github.com/christiangoltz/shaape",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/ivanceras/svgbob",target:"_blank",rel:"noopener noreferrer"},K={href:"https://kevinpt.github.io/syntrax/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.umlet.com/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://vega.github.io/vega/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://vega.github.io/vega-lite/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://wavedrom.com/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://www.spinellis.gr/umlgraph/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/mermaidjs/ariel-diagrams",target:"_blank",rel:"noopener noreferrer"};function T(W,Z){const a=i("ExternalLinkIcon");return l(),o("div",null,[c,e("p",null,[n("到这里就配置完了，```plantuml 代码块中的代码就会被识别为用于绘图的代码，在浏览器运行时将代码替换为图片。"),e("a",u,[n("这是本博客配置 plantuml 时候的 MR，其中的代码可供参考。"),t(a)]),n("下面是配置后的效果：")]),d,e("p",null,[n("这种实现方式的问题在于页面都经过了三方服务的实时计算，如果三方服务挂了，那么已经发布的服务也会受影响，其次性能也不是很好，比较好的方式是将图片生成放在本地，build 的后的 "),h,n(" 引用静态文件链接。通过这种实现方式不止能够支持 PlantUML，还可以支持别的扩展，在配置的过程中看见一些别的服务，未来如果有需求都可以考虑接入。这类项目可以从 "),e("a",m,[n("asciidoctor"),t(a)]),n(" 中找到。")]),g,e("ul",null,[e("li",null,[e("a",_,[n("Vuepress 增加 PlantUML 支持"),t(a)])]),e("li",null,[e("a",k,[n("Include diagrams in your Markdown files with Mermaid"),t(a)])]),e("li",null,[e("a",f,[n("diagram-extension"),t(a)])]),e("li",null,[n("npm repository "),e("ul",null,[e("li",null,[e("a",b,[n("markdown-it"),t(a)])]),e("li",null,[e("a",w,[n("markdown-it-textual-uml"),t(a)])]),e("li",null,[e("a",v,[n("markdown-it-plantuml"),t(a)])])])]),e("li",null,[n("可以考虑接入的服务 "),e("ul",null,[e("li",null,[e("a",x,[n("AsciiToSVG"),t(a)])]),e("li",null,[n("BlockDiag "),e("ul",null,[e("li",null,[e("a",M,[n("BlockDiag"),t(a)])]),e("li",null,[e("a",y,[n("SeqDiag"),t(a)])]),e("li",null,[e("a",P,[n("ActDiag"),t(a)])]),e("li",null,[e("a",B,[n("NwDiag"),t(a)])])])]),e("li",null,[e("a",V,[n("Ditaa"),t(a)])]),e("li",null,[e("a",D,[n("Erd"),t(a)])]),e("li",null,[e("a",L,[n("GraphViz"),t(a)])]),e("li",null,[e("a",G,[n("Mermaid"),t(a)])]),e("li",null,[e("a",S,[n("Mscgen"),t(a)])]),e("li",null,[e("a",U,[n("Shaape"),t(a)])]),e("li",null,[e("a",J,[n("svgbob"),t(a)])]),e("li",null,[e("a",K,[n("Syntrax"),t(a)])]),e("li",null,[e("a",j,[n("UMLet"),t(a)])]),e("li",null,[e("a",q,[n("Vega"),t(a)])]),e("li",null,[e("a",z,[n("Vega-Lite"),t(a)])]),e("li",null,[e("a",A,[n("WaveDrom"),t(a)])]),e("li",null,[e("a",E,[n("UMLGraph"),t(a)])]),e("li",null,[e("a",I,[n("ariel-diagrams"),t(a)])])])])])])}const R=s(p,[["render",T],["__file","vuepress-support-uml.html.vue"]]);export{R as default};
